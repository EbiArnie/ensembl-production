
-*- text -*-

AltSplicingToolkit contains a set of tools to compute information
regarding alternative splicing. At the moment, this toolkit contains
one binary program called:

altSpliceFinder

altSpliceFinder is an extensible and generic tool to compute recurrent 
alternative splicing patterns from a set of transcripts variants. 
It takes a GFF3 file as an input containing a list of transcript
structures in terms of exons and generates a GFF3 file containing the
resulting set of alternative splicing events.

Currently altSpliceFinder is able to find the following types of 
splicing events:
	- Cassette exons (skipped exons)
	- Intron retention
	- Mutually exclusive exons
	- Alternative 3' sites
	- Alternative 5' sites
	- Intron isoform
	- Exon isoform
	- Alternative first exon
	- Alternative last exon
	- Alternative initiation
	- Alternative termination

This program is also able to list constitutive exons from a set of
splicing variants.

Installation

This package uses GNU autoconf generated configure scripts, see the
file INSTALL.configure for generic configure documentation.

Pre-requisites:
--------------

You'll need to install 2 extra libraries that are used by the toolkit:

* The Boost C++ libraries or boost for short (http://www.boost.org)
  which provides free portable libraries compatible with standard
  libraries.
  We currently rely on boost version 1.55.0. It's back compatible to
  boost version 1.45.0

  This version can be downloaded at:
  http://sourceforge.net/projects/boost/files/ 

* Log for C++ library or Log4cpp for short.
	Log4cpp is a library of C++ classes for flexible logging to files, 
	syslog, IDSA and other destinations.
	See the page of the project on SourceForge:
	http://log4cpp.sourceforge.net/
	We have tested the code with both log4cpp1.0 and log4cpp1.1

To install Boost:
----------------

Bjam [Optional]

Remember that you may need to have bjam installed.

If you don't, install Boost.Build from an official release or a
nightly build, as available on the official web site, following these steps:

1. Get a release from http://www.boost.org/boost-build2/
   For instance:
    http://prdownloads.sourceforge.net/boost/boost-build-2.0-m12.tar.bz2

2. Unpack the release. 

3. On the command line, go to the root of the unpacked tree.

4. cd boost-build/jam_src

5. ./build.sh gcc (if you use gcc)

6. Then install boost

Boost

1. Download the latest version of Boost.
      
2. Unpack the release

3. On the command line, go to the root of the unpacked tree like
	 cd boost_1_55_0

4. [Optional] Copy the version of bjam you've just build to this root
   For instance: 
	 cp boost-build/jam_src/bin.linuxx86_64/bjam boost_1_55_0/
  
5. ./bootstrap.sh --prefix=PREFIX

   where PREFIX is a directory where you want Boost libraries to be  
   installed.

6. ./b2

To install Log4cpp:
------------------

1. Get the latest version:

http://sourceforge.net/projects/log4cpp/files/

2. Extract the sources:

  tar zxvf log4cpp-1.1.tar.gz

3. On the command line, go to the root of the unpacked tree.

  cd log4cpp-1.1

4. Run configure:
  ./configure --prefix=PREFIX

 where PREFIX is a directory where you want Log4cpp libraries to be  
   installed.

5. type the following commands
  make
  make test
  make install

It's possible that some of the modules won't compile with g++
From my experience, it's trivial to edit the code to fix the problems
(casting, includes directive order).

AltSplicingToolkit:
------------------

Once Boost and Log4cpp are installed, simply type:

./configure --prefix=<altsplicingtoolkit installation path> \
--with-boost-include=<boost installation path>/include/boost \
--with-boost-lib=<boost installation path>/lib \
--with-log4cpp=<log4cpp installation path>

Example:
./configure --prefix=/softwares/AltSplicingToolkit-0.6 \
--with-boost-include=/softwares/boost_1_55_0/include \
--with-boost-lib=/softwares/boost_1_55_0/lib \
--with-log4cpp=/softwares/log4cpp-1.1

make

and (as root)

make install

On Mac OS X, don't forget to set DYLDD_LIBRARY_PATH:

export LD_LIBRARY_PATH=${LOG4CPP_PATH}/lib:${BOOST_PATH}/lib:${LD_LIBRARY_PATH}
export DYLD_LIBRARY_PATH=${BOOST_PATH}/lib:${DYLD_LIBRARY_PATH}

The file INSTALL should be distributed with packages that use
Autoconf-generated configure scripts and Makefiles that conform to the
GNU coding standards.  The package's README can just give an overview
of the package, where to report bugs, and a pointer to INSTALL for
instructions on compilation and installation.  This removes the need
to maintain many similar sets of installation instructions.

Be sure to read BUGS (especially if this version is not an official
release) and INSTALL.

Licensing

AltSplicingToolkit is released under the Ensembl Licence.

For more licensing information, see
<http://www.ensembl.org/info/about/code_licence.html>.


-----

 Copyright (c) 1999-2013 The European Bioinformatics Institute and 
 Genome Research Limited, and others.  All rights reserved. 

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
Ensembl License for more details.

You should have received a copy of the Ensembl License
along with this program.  If not, see 
<http://www.ensembl.org/info/about/code_licence.html>.
